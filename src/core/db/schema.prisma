generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id           String  @id @unique @default(cuid())
  week         Int
  periodNumber Int     @map("period_number")
  spaceId      String
  courseId     String
  teacherId    String
  space        Space   @relation(fields: [spaceId], references: [id])
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher      Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Common {
  id     String @id @unique @default(cuid())
  name   String @unique
  color  String
  color2 String

  spaces  Space[]
  Teacher Teacher[]
  Course  Course[]

  @@map("commons")
}

model Space {
  id   String @id @unique @default(cuid())
  name String

  commonId String    @map("common_id")
  common   Common    @relation(fields: [commonId], references: [id], onDelete: Cascade)
  Booking  Booking[]

  @@map("spaces")
}

model Course {
  id   String @id @unique @default(cuid())
  line Int
  code String
  name String

  commonId  String @map("common_id")
  teacherId String @map("teacher_id")

  teacher Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  common  Common    @relation(fields: [commonId], references: [id], onDelete: Cascade)
  Booking Booking[]

  @@map("classes")
}

model Teacher {
  id    String @id @unique @default(cuid())
  code  String @unique
  email String @unique

  userId   String? @unique @map("user_id")
  commonId String  @map("common_id")

  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  common  Common    @relation(fields: [commonId], references: [id])
  classes Course[]
  Booking Booking[]

  @@map("teachers")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  image         String
  emailVerified DateTime? @map("email_verified")
  isOnboarded   Boolean   @default(false) @map("is_onboarded")
  kamarPassword String?   @map("kamar_password")
  isTeacher     Boolean   @default(false) @map("is_teacher")

  teacher  Teacher?
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Authentication Related Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
